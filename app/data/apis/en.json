{"lang": "en", "alternate_html_url": "https://bader-nasser.appspot.com/ar/", "url": "https://bader-nasser.appspot.com/apis/en/", "posts": [{"lang": "en", "description": "Some tips about how to use ASP.NET Core scaffolding with MS SQL Server on Ubuntu", "alternate_html_url": "", "title": "Using ASP.NET Core with MS SQL Server and Scaffolding on Linux", "url": "https://bader-nasser.appspot.com/apis/en/using-aspnet-core-with-mssql-and-scaffolding-on-linux", "previous_url": "https://bader-nasser.appspot.com/apis/en/resources-for-udacity-web-development-course", "created_at": "2017-07-18T14:54:01.000Z", "updated_at": "2017-11-03T09:40:23.640Z", "next_html_url": "", "html_url": "https://bader-nasser.appspot.com/en/using-aspnet-core-with-mssql-and-scaffolding-on-linux", "content": "\nThis post assumes you have .NET Core SDK and Microsoft SQL Server installed on\nyour machine. I'm using the latest version of [.NET Core 1.1][core-downloads]\n(1.1.0-preview1-005077) and [Microsoft SQL Server 2017 (RC1)][sql-overview] on\nUbuntu 17.04.\n\n\n## Creating a simple MVC app\n\nLet's open the terminal and use the `dotnet` command with Individual authentication\nand LocalDB to have a nice boilerplate!\n\n```\ndotnet new mvc --auth Individual --use-local-db true -o BlogPost\n```\n\nNow, we just need to change the connection string inside `appsettings.json` to\nsomething like:\n\n```\n\"DefaultConnection\": \"Server=localhost;Database=your-db-name;Trusted_Connection=False;MultipleActiveResultSets=true;user id=sa;password=your-sophisticated-password\"\n```\n\nand Ta-Da! We can use MS SQL Server with ASP.NET Core on Linux!\nFor more information about connection strings, consult\n[SQL Server Connection Strings for ASP.NET Web Applications][sql-connections].\n\n\n## Scaffolding with `aspnet-codegenerator`\n\nThis version of .NET Core creates a `.csproj` with the required NuGet packages\nfor scaffolding. Just run `dotnet aspnet-codegenerator` and have fun with it :D\n\nIf you can't use the latest preview release, then you may want to add\n`System.Composition`, `Microsoft.Composition` and\n`Microsoft.VisualStudio.Web.CodeGeneration.Design` packages to your projec\nusing the following commands:\n\n```\ndotnet add package System.Composition\n\ndotnet add package Microsoft.Composition\n\ndotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design\n```\n\nFinally, Run `dotnet restore` followed by one of the following commands to see\nthe available options to scaffold your views, controllers and areas :)\n\n```\ndotnet aspnet-codegenerator view -h\n\ndotnet aspnet-codegenerator controller -h\n\ndotnet aspnet-codegenerator area -h\n```\n\nI found myself creating a model (Say `Post.cs`) then executing the following\ncommand to scaffold a controller, views and the data context:\n\n```\ndotnet aspnet-codegenerator controller -name PostsController -m BlogPost.Models.Post -dc BlogPost.Models.PostContext --relativeFolderPath Controllers -scripts --useDefaultLayout\n```\n\nFor more information, see [SO's How to generate controller using dotnetcore\ncommand line][stack-generate], [SO's Reference .NET 4.5 dll in .NET Core 1.1\ncsproj?][stack-reference] and [Visual Studio Code extension: ASP.NET Core\nScaffolding][ext].\n\n***A side note***: There's a ticket opened on GitHub to track\n[documenting aspnet-codegenerator][asp-gen]. Let's hope it'll be published soon!\nI hope this post was helpful to you :)\n\n[core-downloads]: https://github.com/dotnet/core/tree/master/release-notes/download-archives\n\n[sql-overview]: https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-overview\n\n[sql-connections]: https://msdn.microsoft.com/en-us/library/jj653752(v=vs.110).aspx#sqlserver\n\n[stack-generate]: https://stackoverflow.com/questions/41011700/how-to-generate-controller-using-dotnetcore-command-line\n\n[stack-reference]: https://stackoverflow.com/questions/42349605/reference-net-4-5-dll-in-net-core-1-1-csproj\n\n[ext]: https://marketplace.visualstudio.com/items?itemName=firefox.scaffold\n\n[asp-gen]: https://github.com/aspnet/Docs/issues/3208\n", "previous_title": "Helpful resources and notes for Udacity's web development course", "next_url": "", "next_title": "", "alternate_url": "", "slug": "using-aspnet-core-with-mssql-and-scaffolding-on-linux", "previous_html_url": "https://bader-nasser.appspot.com/en/resources-for-udacity-web-development-course", "alternate_lang": ""}, {"lang": "en", "description": "Helpful resources and notes for Udacity's web development course", "alternate_html_url": "", "title": "Helpful resources and notes for Udacity's web development course", "url": "https://bader-nasser.appspot.com/apis/en/resources-for-udacity-web-development-course", "previous_url": "https://bader-nasser.appspot.com/apis/en/hello", "created_at": "2017-01-10T11:22:24.000Z", "updated_at": "2017-11-03T09:40:32.556Z", "next_html_url": "https://bader-nasser.appspot.com/en/using-aspnet-core-with-mssql-and-scaffolding-on-linux", "html_url": "https://bader-nasser.appspot.com/en/resources-for-udacity-web-development-course", "content": "\n[Udacity's web development course][1] is one of my favorite [online courses][2].\nIt teaches some aspects of the front-end and focuses on the back-end. It helped\nme understand scaling, caching, security and how to create RESTful APIs.\n\nI think the following resources and notes will help you in this course:\n\n* If you need a refresher on Python or want to learn Python, consider\n[Google\u2019s Python Class (2-days)][3] or/and [Official Python Tutorial][4].\nUltimately, you should learn about some of the built-in functions like\n[dir(), help() and type()][5]\n\n* [Download Official Python Documentation][6] to learn Python and search for\nanswers for your Python questions!\n\n* Read [Mozilla's Getting started with the web][7] or/and take [Udacity\u2019s Intro\nto HTML and CSS course][8] in case you want to learn a little bit more about\nHTML, CSS and JavaScript\n\n* Note that this course uses [Google App Engine **Standard** Environment][9] and\n[App Engine SDK for Python][10] (Click on \"**Optionally, you can also download\nthe original App Engine SDK for Python**\" on [their download page][10] to get\nthe SDK)\n\n* Many applications and tools can run from the terminal (Click **Start** menu and\nsearch for **cmd** for Windows) but you will need to tell the Operating System\nwhere to find these tools by adding their directories to the **PATH environment\nvariable** (Some installers do this for us). After downloading App Engine SDK zip\nfile, unzip/extract it and:\n\n  - Search for how to add directories to the PATH for **Windows**! I don't have\n  Windows nowadays and mostly the path will be updated by the installers. The\n  following __(3)__ steps & commands **are not** helpful for Windows\n\n  - Open the Terminal (for Linux and maybe macOS, Press `Ctrl + Alt + T`), type\n  each command of the following commands and hit `Enter`:\n\n    1. Change the current directory to **your App Engine SDK directory** using\n    `cd`:\n        ```\n        cd /home/badersur/Downloads/google_appengine\n        ```\n    \n    2. Make your files executable (for Ubuntu/Linux and maybe for macOS. Read [Ubuntu's File Permissions document][11] for details):\n        ```\n        chmod u+x dev_appserver.py appcfg.py\n        ```\n\n    3. Open `~/.bashrc` or `~/.profile` or `/etc/profile.d/my_env_vars.sh` (Read [Ubuntu's Environment Variables document][12] for details):\n        ```\n        gedit ~/.bashrc\n        ```\n\n  - Add **App Engine SDK directory** to the PATH by adding these lines to the chosen file above:\n    ```\n    google_appengine=/home/badersur/Downloads/google_appengine\n\n    export PATH=$PATH:$google_appengine\n    ```\n   \n    Or create an alias for your files **instead of adding the directories to the PATH** (I've added these lines to `~/.bashrc`):\n    ```\n    alias dev=\"/home/badersur/Downloads/google_appengine/dev_appserver.py\"\n\n    alias appcfg=\"/home/badersur/Downloads/google_appengine/appcfg.py\"\n    ```\n\n    You can use any name for the aliases but make sure you don't hide another command by them! (Open the terminal, type the command/alias, press `Tab`, and if you don't see a suggestion then you can use it safely) Now we can use `dev` & `appcfg` instaed of `dev_appserver.py` & `appcfg.py`. Ubuntu 16.04 deletes the contents of `/tmp` -which is used by dev_appserver to store my data locally- on shutdown. This causes losing my data so I use an alias with a dev_appserver's option to solve this issue like this:\n    ```\n    gae_opt=\"--storage_path=/home/badersur/Downloads/gae_data\"\n\n    alias dev=\"/home/badersur/Downloads/google_appengine/dev_appserver.py $gae_opt\"\n    ```\n\n  - You should **close** the terminal after updating `~/.bashrc` or `~/.profile`, and you should **restart** your computer or **log out** after updating `/etc/profile.d/my_env_vars.sh`\n\n* Note also that this course **does not** use any billable components from Google Cloud Platform (App Engine) so **there is no need to sign up for a [free trial][13]**. Just make sure you have a google account, log in to [Google Cloud Console][14], create a new project and **note the id** (which **you can edit** to any thing you like) that will be part of your web application url (i.e. `your-project-id.appspot.com`) and will be used for deployment\n\n* You should keep your project files in a separate place other than App Engine SDK folder!\n\n* I suggest completing **Lesson 2a - Templates** before solving **Problem Set 2**!\n\n* Follow App Engine\u2019s tutorial: [Creating a Guestbook Application][15] to understand URL handlers, Google's Cloud Datastore, [Jinja2 templates][16], serving static files (like: .css, .js & .png) and [deployment][17] - I suggest after lesson 2 and before lesson 4. Open the **terminal/cmd** and:\n\n  - Type `dev_appserver.py --port [PORT_NUMBER] [YOUR_APP_DIR]` to test your web application locally (omit `--port [PORT_NUMBER]` to use the default: 8080, and type `dev_appserver.py -h` to know about other available options)\n\n  - Type `appcfg.py update [YOUR_APP_DIR] -A [YOUR_PROJECT_ID] -V [YOUR_VERSION_ID]` to deploy your app (omit `-A [YOUR_PROJECT_ID] -V [YOUR_VERSION_ID]` if you have set your application's values for `application` and `version` in app.yaml). **Note**: Set `debug` to `False` in your `webapp2.WSGIApplication(...)` before deployment or remove it.\n\n* This course uses [webapp2][18] web framework which is compatible with Google App Engine\u2019s webapp. Note that:\n\n  - `self.response.write()` [is similar to][19] `self.response.out.write()` so you can use any of 'em\n\n  - By default, the [Content-Type][20] header is `text/html; charset=utf-8`, including the encoding behavior. If you want to change it use `self.response.headers['Content-Type']`\n\n* [App Engine encourages us][21] to use NDB Client Library instead of the older DB Client Library (i.e. we should use `from google.appengine.ext import ndb` instead of `from google.appengine.ext import db`):\n    > **Note**: Developers building new applications are **strongly encouraged** to use the [NDB Client Library][22], which has several benefits compared to this client library, such as automatic entity caching via the Memcache API. If you are currently using the older DB Client Library, read the [DB to NDB Migration Guide][23]\n\n* [App Engine also recommends][24] using [Datastore queries][25] over [GQL][26] to access the full range of Cloud Datastore's query capabilities\n\n* So you submitted something to Datastore but it didn't show up immediately? Well, you should set a parent key in each entity to form an entity group and query these entities using this key (Mr. Steve used the parent key in [Problem Set 3][27] and explained it more in the [Ancestors video in Wrap-Up Questions][28] and [I've answered a question about this][29])\n\n* Download an IDE/editor that understands Python! At least it should be able to indent/format your code and provide code snippets. [PyCharm Professional Edition][30] has a great support for GAE and other projects, and you can [tweak][31] the [Community Edition][30] to support GAE. Also, [VS Code][32] supports Python & GAE via [Don's Python extension][33]\n\n* You may want to use [freegeoip.net/][34] or [ipinfo.io/][35] APIs to obtain user\u2019s location for **lesson 5**. But note that App Engine adds several headers to all requests like [X-AppEngine-CityLatLong][36] so *we can use it* instead of these APIs!\n\n* Download instructor\u2019s HW solutions: [HW2][37], [HW3][38], [HW4][39] & [HW5][40]\n\n* Visit [stackoverflow.com/questions/tagged/google-app-engine][41] for questions and answers about App Engine\n\n* You **should** include the contents of your [app.yaml][42], wsgi applications ( i.e. `app = webapp2.WSGIApplication(...)` ) and your project structure in your question if you have an issue with [URL handlers][43]\n\n* In [app.yaml][42], you **should** set `secure` subelement of the [handlers][42] to **always** for pages that accept critical values from users (like signup & login pages):\n    ```\n    handlers:\n    - url: /signup\n      script: signing.app\n      secure: always\n\n    - url: /login\n      script: signing.app\n      secure: always\n    ```\n\n## Extra\n\nThe previous resources are more than enough for the course, but if you need more:\n\n- Read [Google's Web][44] to learn how to develop the next generation of applications for the web\n\n- Use [Google's PageSpeed Insights][45] to identify ways to make your site faster and more mobile-friendly\n\n- Use [Microsoft's Site scan][46] to run a quick code scan on any URL to check for out-of-date libraries, layout issues, and accessibility\n\n- [Watch Paul Lewis as he builds the Chrome Dev Summit site][47] (He uses App Engine with Python, CSS, JS and HTML)\n\nSome of these notes are answers for Frequently Asked Questions (FAQs) but without the questions :P\n\nI hope you've enjoyed reading this post as much as I've enjoyed writing & updating it :)\n\n[1]: https://www.udacity.com/course/web-development--cs253\n[2]: https://bader-sur.appspot.com/en/courses?blog\n[3]: https://developers.google.com/edu/python/\n[4]: https://docs.python.org/2/tutorial/index.html\n[5]: https://docs.python.org/2/library/functions.html\n[6]: https://docs.python.org/2/download.html\n[7]: https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web\n[8]: https://www.udacity.com/course/intro-to-html-and-css--ud304\n[9]: https://cloud.google.com/appengine/docs/python/\n[10]: https://cloud.google.com/appengine/docs/python/download\n[11]: https://help.ubuntu.com/community/FilePermissions\n[12]: https://help.ubuntu.com/community/EnvironmentVariables\n[13]: https://cloud.google.com/free-trial/\n[14]: https://console.cloud.google.com/\n[15]: https://cloud.google.com/appengine/docs/python/getting-started/creating-guestbook\n[16]: http://jinja.pocoo.org/docs/2.9/\n[17]: https://cloud.google.com/appengine/docs/python/tools/uploadinganapp\n[18]: https://webapp2.readthedocs.io/en/latest/index.html\n[19]: https://webapp2.readthedocs.io/en/latest/api/webapp2.html#webapp2.Response\n[20]: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\n[21]: https://cloud.google.com/appengine/docs/python/datastore/modelclass\n[22]: https://cloud.google.com/appengine/docs/python/ndb\n[23]: https://cloud.google.com/appengine/docs/python/ndb/db_to_ndb\n[24]: https://cloud.google.com/appengine/docs/python/getting-started/storing-data-datastore#retrieving_submitted_greetings\n[25]: https://cloud.google.com/appengine/docs/python/ndb/queries\n[26]: https://cloud.google.com/appengine/docs/python/datastore/gqlreference\n[27]: https://classroom.udacity.com/courses/cs253/lessons/48198869/concepts/484038120923#\n[28]: https://classroom.udacity.com/courses/cs253/lessons/48725292/concepts/487342410923#\n[29]: https://discussions.udacity.com/t/problem-while-refreshing-ascii-blog-after-post/177504/2?u=badersur\n[30]: https://www.jetbrains.com/pycharm/download\n[31]: http://www.enkisoftware.com/devlogpost-20141231-1-Python_Google_App_Engine_debugging_with_PyCharm_CE.html\n[32]: https://code.visualstudio.com/\n[33]: https://marketplace.visualstudio.com/items?itemName=donjayamanne.python\n[34]: https://freegeoip.net/\n[35]: https://ipinfo.io/\n[36]: https://cloud.google.com/appengine/docs/python/how-requests-are-handled#x-appengine-citylatlong\n[37]: https://udacity-cs253.appspot.com/static/hw2.tgz\n[38]: https://udacity-cs253.appspot.com/static/hw3.tgz\n[39]: https://udacity-cs253.appspot.com/static/hw4.tgz\n[40]: https://udacity-cs253.appspot.com/static/hw5.tgz\n[41]: https://stackoverflow.com/questions/tagged/google-app-engine\n[42]: https://cloud.google.com/appengine/docs/python/config/appref\n[43]: https://webapp2.readthedocs.io/en/latest/guide/routing.html\n[44]: https://developers.google.com/web/\n[45]: https://developers.google.com/speed/pagespeed/insights/\n[46]: https://developer.microsoft.com/en-us/microsoft-edge/tools/staticscan/\n[47]: https://www.youtube.com/playlist?list=PLNYkxOF6rcIBykcJ7bvTpqU7vt-oey72J\n", "previous_title": "Hello weblog!", "next_url": "https://bader-nasser.appspot.com/apis/en/using-aspnet-core-with-mssql-and-scaffolding-on-linux", "next_title": "Using ASP.NET Core with MS SQL Server and Scaffolding on Linux", "alternate_url": "", "slug": "resources-for-udacity-web-development-course", "previous_html_url": "https://bader-nasser.appspot.com/en/hello", "alternate_lang": ""}, {"lang": "en", "description": "Saying hello to the world because developers have to!", "alternate_html_url": "", "title": "Hello weblog!", "url": "https://bader-nasser.appspot.com/apis/en/hello", "previous_url": "", "created_at": "2016-08-31T13:45:29.000Z", "updated_at": "2017-12-10T16:00:28.631Z", "next_html_url": "https://bader-nasser.appspot.com/en/resources-for-udacity-web-development-course", "html_url": "https://bader-nasser.appspot.com/en/hello", "content": "\nHello people and welcome to my new and awesome blog :D\n\nIt has been a while since the last time I posted something on my WordPress blog.\nCurrently, I have no intention to post a lot and my main purpose is to\n[implement as much as I can][about] in this blog and to share [my projects][proj]\nwith you.\nI may post about technical stuff (like implemented features or features I would\nlike to implement or things I've learned) and some aspects of my life I believe! :)\n\n[about]: https://badersur-v2.appspot.com/about?blog\n[proj]: https://bader-sur.appspot.com/en/projects?blog\n", "previous_title": "", "next_url": "https://bader-nasser.appspot.com/apis/en/resources-for-udacity-web-development-course", "next_title": "Helpful resources and notes for Udacity's web development course", "alternate_url": "", "slug": "hello", "previous_html_url": "", "alternate_lang": ""}], "updated_at": "2017-12-10T16:00:28.631Z", "html_url": "https://bader-nasser.appspot.com/en/", "alternate_url": "https://bader-nasser.appspot.com/apis/ar/", "alternate_lang": "ar"}